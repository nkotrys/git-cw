package com.example.myapplication

import android.os.Bundle
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import android.annotation.SuppressLint
import android.view.View
import android.widget.Button
import java.math.BigDecimal
import java.math.RoundingMode
import kotlin.math.sqrt

class MainActivity : AppCompatActivity() {
    //deklaracja zmiennych
    var equation: String = ""      //dzialanie widoczne
    var result: String = ""       //aktualny wynik
    var resultDecimal = 0.toBigDecimal()  //aktualny wynik w decimal
    //var wynik: String = ""        //wynik działania
    var operator: String = ""     //wybrane działanie
    var isOpJustPressed: Boolean = false    //informacja czy właśnie nacisnęliśmy przycisk operatora
    var isDotJustPressed: Boolean = false   //moze powinno byc bez just?
    var isEqualJustPressed: Boolean = false
    var isPositive: Boolean = true

//wynik widoczny po wpisaniu liczby tylko, przy działaniu nic nie wyświetlać
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //var ow = findViewById<TextView>(R.id.editTextNumberDecimal).text
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }


    fun getResult(firstNumber: String, secondNumber: String, equation: String): BigDecimal {
        var result = 0.toBigDecimal()
        if(equation == "*"){
            result = firstNumber.toBigDecimal()*secondNumber.toBigDecimal()
        }
        else if(equation == "/"){
            result = firstNumber.toBigDecimal().divide(secondNumber.toBigDecimal(),10, RoundingMode.HALF_UP).stripTrailingZeros()
        }
        else if(equation == "-"){
            result = firstNumber.toBigDecimal()-secondNumber.toBigDecimal()
        }
        else if(equation == "+"){
            result = firstNumber.toBigDecimal()+secondNumber.toBigDecimal()
        }

        return result
    }

    fun parseAndCalculation(calculation: String): BigDecimal {
        var result = 0.toBigDecimal()
        var firstNumber = ""
        var secondNumber = ""
        var isEquation = false;
        var equation = ""

        for (c in calculation) {
            if(c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '.'){
                if(isEquation){
                    secondNumber = secondNumber + c.toString()
                }
                else{
                    firstNumber = firstNumber + c.toString()
                }


            }
            else if(c == '*' || c == '-' || c == '+' || c == '/'){
                if(isEquation){
                    result = getResult(firstNumber,secondNumber,equation);
                    firstNumber = result.toString();
                    secondNumber = ""
                    equation = c.toString();
                }
                else{
                    equation = c.toString();
                    isEquation = true;
                }
            }
        }
        if(isEquation) {
            result = getResult(firstNumber, secondNumber, equation);
        }
        else{
            result = firstNumber.toBigDecimal()
        }

        return result
    }

    fun onClickC(view: View) {
        val ow = findViewById<TextView>(R.id.TextNumberMain)
        val ow2 = findViewById<TextView>(R.id.TextNumberResult)

        ow.text="0"
        ow2.text=""
        equation = "0"
        result = ""
        operator = ""
        isOpJustPressed = false
        isDotJustPressed = false
        isEqualJustPressed = false
        isPositive = true
    }

    fun onClickBack(view: View) {
        val ow = findViewById<TextView>(R.id.TextNumberMain)
        val ow2 = findViewById<TextView>(R.id.TextNumberResult)

        if(ow.text =="0" || ow.text.length == 0){
            ow.text="0"
            ow2.text=""
            equation = "0"
            isOpJustPressed = false
            isDotJustPressed = false
            isEqualJustPressed = false
            isPositive = true

        }
        else{
            equation = equation.dropLast(1)
            ow.text = equation
        }
    }





}
