package com.example.myapplication

import android.os.Bundle
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import android.annotation.SuppressLint
import android.view.View
import android.widget.Button
import java.math.BigDecimal
import java.math.RoundingMode
import kotlin.math.sqrt

class MainActivity : AppCompatActivity() {
    //deklaracja zmiennych
    var equation: String = ""
    //var result: String = ""       //aktualny wynik
    var resultDecimal = 0.toBigDecimal()  //aktualny wynik w decimal
    //var wynik: String = ""        //wynik działania
    var operator: String = ""     //wybrane działanie
    var isOpJustPressed: Boolean = false    //informacja czy właśnie nacisnęliśmy przycisk operatora
    var isDotJustPressed: Boolean = false   //moze powinno byc bez just?
    var isEqualJustPressed: Boolean = false
    var numberOfEquation = 0
    var isPositive: Boolean = true
    var signs = arrayOf("-", "+", "*", "/")
    var isOpenBracket = false

    //wynik widoczny po wpisaniu liczby tylko, przy działaniu nic nie wyświetlać
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //var ow = findViewById<TextView>(R.id.editTextNumberDecimal).text
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }


    fun getResult(firstNumber: String, secondNumber: String, equation: String): BigDecimal {
        var result = 0.toBigDecimal()
        if(equation == "*"){
            result = firstNumber.toBigDecimal()*secondNumber.toBigDecimal()
        }
        else if(equation == "/"){
            result = firstNumber.toBigDecimal().divide(secondNumber.toBigDecimal(),10, RoundingMode.HALF_UP).stripTrailingZeros()
        }
        else if(equation == "-"){
            result = firstNumber.toBigDecimal()-secondNumber.toBigDecimal()
        }
        else if(equation == "+"){
            result = firstNumber.toBigDecimal()+secondNumber.toBigDecimal()
        }

        return result
    }

fun parseAndCalculation(calculation: String): BigDecimal {

    var number = ""
    var resultTemp = ""
    var numberList : MutableList<String> = ArrayList()
    var equationList : MutableList<String> = ArrayList()
    var currentCalculation = calculation
    var indexStart = -1
    var indexEnd = -1
    var subCalculation = ""
    var isNumber = false

    while(currentCalculation.contains('(')){
        indexStart = currentCalculation.indexOf('(')
        indexEnd = currentCalculation.indexOf(')')
        if(indexEnd == -1){
            indexEnd = currentCalculation.length
        }
        subCalculation = parseAndCalculation(currentCalculation.substring(indexStart+1,indexEnd)).toString()
        if(indexEnd == currentCalculation.length){
            currentCalculation = currentCalculation.substring(0,indexStart) + subCalculation
        }
        else{
            currentCalculation = currentCalculation.substring(0,indexStart) + subCalculation + currentCalculation.substring(indexEnd + 1)
        }

    }

    for(c in currentCalculation){
        if(c == '*' || c == '-' || c == '+' || c == '/'){
            if(c == '-' && !isNumber){
                number = number + c.toString();
                isNumber = true
            }
            else{
                numberList.add(number)
                number = ""
                equationList.add(c.toString())
                isNumber = false
            }
        }
        else{
            number = number + c.toString();
            isNumber = true
        }
    }
    numberList.add(number)

    for((index,eq) in equationList.withIndex()){
        if(eq == "*" || eq == "/"){
            resultTemp = getResult(numberList.get(index),numberList.get(index+1),equationList.get(index)).toString()
            numberList.set(index+1,resultTemp)
            numberList.set(index,"xx")
            equationList.set(index,"xx")
        }
    }
    while(numberList.contains("xx")){
        numberList.remove("xx")
        equationList.remove("xx")
    }
    for((index,eq) in equationList.withIndex()){
        resultTemp = getResult(numberList.get(index),numberList.get(index+1),equationList.get(index)).toString()
        numberList.set(index+1,resultTemp)
        numberList.set(index,"xx")
        equationList.set(index,"xx")
    }

    return numberList.last().toBigDecimal()
}

fun onClickC(view: View) {
    val ow = findViewById<TextView>(R.id.TextNumberMain)
    val ow2 = findViewById<TextView>(R.id.TextNumberResult)

    ow.text="0"
    ow2.text=""
    numberOfEquation = 0
    isOpenBracket = false

}

fun onClickBack(view: View) {
    val ow = findViewById<TextView>(R.id.TextNumberMain)
    val ow2 = findViewById<TextView>(R.id.TextNumberResult)
    equation = ow.text.toString()

    if(ow.text =="0" || ow.text.length == 0 || ow.text.length == 1){
        equation = "0"
        ow.text="0"
    }
    else{
        var removed: String = equation.last().toString()
        equation = equation.dropLast(1)
        ow.text = equation
        if(signs.contains(removed) && !signs.contains(equation.last().toString())){
            numberOfEquation = numberOfEquation - 1
        }
        if(removed == "("){
            isOpenBracket = false
        }
        if(removed == ")"){
            isOpenBracket = true
        }
    }
    if(numberOfEquation > 0 && !signs.contains(equation.last().toString())){
        ow2.text = parseAndCalculation(ow.text.toString()).toString()
    }
    else{
        ow2.text = ""
    }
}

fun onClickNumber(view: View) {
    val ow = findViewById<TextView>(R.id.TextNumberMain)
    val ow2 = findViewById<TextView>(R.id.TextNumberResult)
    equation = ow.text.toString()
    var number = (view as Button).text.toString()

    if(ow.text =="0" || ow.text.length == 0){
        equation = "0"
        ow.text = number
    }
    else{
        equation = equation + number
        ow.text = equation
    }
    if(numberOfEquation > 0 && !signs.contains(equation.last().toString())){
        ow2.text = parseAndCalculation(ow.text.toString()).toString()
    }
    else{
        ow2.text = ""
    }
}


    fun onClickResult(view: View) {
        val ow = findViewById<TextView>(R.id.TextNumberMain)
        val ow2 = findViewById<TextView>(R.id.TextNumberResult)
        equation = ow.text.toString()
        while(signs.contains(equation.last().toString())) {
            equation = equation.dropLast(1)
        }
        ow.text = parseAndCalculation(ow.text.toString()).toString()
        ow2.text = ""
        numberOfEquation = 0

    }

    fun onClickSign(view: View) {
        val ow = findViewById<TextView>(R.id.TextNumberMain)
        val ow2 = findViewById<TextView>(R.id.TextNumberResult)
        var sign = (view as Button).text.toString()
        equation = ow.text.toString()

        if(ow.text =="0" || ow.text.length == 0){
            equation = "0"
        }
        else{
            equation = equation + sign
            numberOfEquation = numberOfEquation + 1
            ow.text = equation
        }
        if(numberOfEquation > 0 && !signs.contains(equation.last().toString())){
            ow2.text = parseAndCalculation(ow.text.toString()).toString()
        }
        else{
            ow2.text = ""
        }

    }

    fun onClickBracket(view: View) {
        val ow = findViewById<TextView>(R.id.TextNumberMain)
        val ow2 = findViewById<TextView>(R.id.TextNumberResult)
        equation = ow.text

        if(equation =="0" || equation.length == 0){
            equation = "("
            isOpenBracket = true
        }
        else{
            if(isOpenBracket && equation.last() == '('){
                equation = equation.dropLast(1)
                isOpenBracket = false
            }
            else if(isOpenBracket){
                equation = equation + ")"
                isOpenBracket = false
            }
            else{
                if(!signs.contains(equation.last().toString())){
                    equation = equation + "*("
                    numberOfEquation = numberOfEquation +1
                }
                else{
                    equation = equation + "("
                }
                isOpenBracket = true
            }
        }
        ow.text = equation
        /*if(numberOfEquation > 0 && equation.last() == ')'){
            ow2.text = parseAndCalculation(equation.toString()).toString()
            
        }
        else{
            ow2.text = ""
        }*/

    }





}
